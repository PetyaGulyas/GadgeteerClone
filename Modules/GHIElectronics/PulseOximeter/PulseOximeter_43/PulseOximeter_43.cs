using System;
using Microsoft.SPOT;
using System.Threading;

using GT = Gadgeteer;
using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.SocketInterfaces;

namespace Gadgeteer.Modules.GHIElectronics
{
    /// <summary>
    /// A PulseOximeter module for Microsoft .NET Gadgeteer
    /// </summary>
    public class PulseOximeter : GTM.Module
    {
        Thread serialReadThread;

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The socket that this module is plugged in to.</param>
        public PulseOximeter(int socketNumber)
        {
            IsProbeAttached = false;
            LastReading = null;

            // This finds the Socket instance from the user-specified socket number.  
            // This will generate user-friendly error messages if the socket is invalid.
            // If there is more than one socket on this module, then instead of "null" for the last parameter, 
            // put text that identifies the socket to the user (e.g. "S" if there is a socket type S)
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);

            serialPort = GTI.SerialFactory.Create(socket, 4800, GTI.SerialParity.Even, GTI.SerialStopBits.One, 8, GTI.HardwareFlowControl.NotRequired, this);
            serialPort.Open();

            this.serialReadThread = new Thread(SerialLineDecoding);
            this.serialReadThread.Start();
        }


        private GTI.Serial serialPort;

        private void SerialLineDecoding()
        {
            bool sync = false;
            byte[] data = new byte[5];

            while (true)
            {
                int numread = 0;
                if (!sync)
                {
                    int b = serialPort.ReadByte();
                    if (b < 0)
                    {
                        Thread.Sleep(100);
                        continue;
                    }
                    if (((b >> 7) & 0x1) == 1)
                    {
                        data[0] = (byte)b;
                        numread = 1;
                        sync = true;
                    }
                    else
                    {
                        continue;
                    }
                }

                while (numread < 5)
                {
                    int read = serialPort.Read(data, numread, 5 - numread);
                    if (read < 0)
                    {
                        DebugPrint("Serial error");
                        sync = false;
                        if (IsProbeAttached)
                        {
                            IsProbeAttached = false;
                            OnProbeDetached(this);
                        }
                        continue;
                    }

                    numread += read;
                }

                if (((data[0] >> 7) & 0x1) != 1)
                {
                    DebugPrint("Lost sync");
                    sync = false;
                    if (IsProbeAttached)
                    {
                        IsProbeAttached = false;
                        OnProbeDetached(this);
                    }
                    continue;
                }

                bool probeAttached = ((data[2] >> 4) & 0x1) == 0;

                if (!probeAttached && IsProbeAttached)
                {
                    IsProbeAttached = false;
                    OnProbeDetached(this);
                }

                bool pulseEvent = ((data[0] >> 6) & 0x1) == 1;
                if (!probeAttached || !pulseEvent) continue;

                int signalStrength = data[0] & 0xF;
                //int Histogram = data[2] & 0xF;
                int pulseRate = ((data[2] << 1) & 0x80) + (data[3] & 0x7F);
                int spO2 = data[4] & 0x7F;

                if (pulseRate == 255 || spO2 == 127) continue;

                LastReading = new Reading(pulseRate, spO2, signalStrength);

                if (probeAttached && !IsProbeAttached)
                {
                    IsProbeAttached = true;
                    OnProbeAttached(this);
                }
                OnHeartbeat(this, LastReading);

                //Debug.Print("Rate " + PulseRate + " SPO2 " + SPO2 + " Sig " + SignalStrength + " Hist " + Histogram + (PulseSoundTrigger ? " *" : " "));
            }
        }

        /// <summary>
        /// Whether the PulseOximeter's probe is attached to a finger.
        /// </summary>
        public bool IsProbeAttached
        {
            get;
            private set;
        }

        /// <summary>
        /// A class representing a pulse oximeter reading
        /// </summary>
        public class Reading
        {
            /// <summary>
            /// Make a new pulse oximeter reading
            /// </summary>
            /// <param name="PulseRate">The pulse rate</param>
            /// <param name="SPO2">The oxygen saturation</param>
            /// <param name="SignalStrength">The signal strength of the reading</param>
            public Reading(int PulseRate, int SPO2, int SignalStrength)
            {
                this.PulseRate = PulseRate;
                this.SignalStrength = SignalStrength;
                this.SPO2 = SPO2;
            }

            /// <summary>
            /// The pulse rate (this is automatically averaged over time)
            /// </summary>
            public int PulseRate { get; private set; }

            /// <summary>
            /// The oxygen saturation, range 0-100
            /// </summary>
            public int SPO2 { get; private set; }

            /// <summary>
            /// The signal strength, range 0-15
            /// </summary>
            public int SignalStrength { get; private set; }
        }

        /// <summary>
        /// The most recent valid reading from the pulse oximeter
        /// </summary>
        public Reading LastReading
        {
            get;
            private set;
        }

        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="Heartbeat"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="PulseOximeter"/> object that raised the event.</param>
        /// <param name="reading">The PulseOximeter reading</param>
        public delegate void HeartbeatHandler(PulseOximeter sender, Reading reading);

        /// <summary>
        /// Raised when the <see cref="PulseOximeter"/> detects a heartbeat.
        /// </summary>
        /// <remarks>
        /// Implement this event handler when you want to provide an action associated with a heartbeat.
        /// </remarks>
        public event HeartbeatHandler Heartbeat;

        private HeartbeatHandler onHeartbeat;

        /// <summary>
        /// Raises the <see cref="Heartbeat"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="PulseOximeter"/> that raised the event.</param>
        /// <param name="reading">The PulseOximeter reading.</param>
        protected virtual void OnHeartbeat(PulseOximeter sender, Reading reading)
        {
            if (this.onHeartbeat == null)
            {
                this.onHeartbeat = new HeartbeatHandler(this.OnHeartbeat);
            }

            if (Program.CheckAndInvoke(Heartbeat, this.onHeartbeat, sender, reading))
            {
                this.Heartbeat(sender, reading);
            }
        }


        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="ProbeAttached"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="PulseOximeter"/> object that raised the event.</param>
        public delegate void ProbeAttachedHandler(PulseOximeter sender);

        /// <summary>
        /// Raised when the <see cref="PulseOximeter"/> detects that the probe is placed on a finger.
        /// </summary>
        public event ProbeAttachedHandler ProbeAttached;

        private ProbeAttachedHandler onProbeAttached;

        /// <summary>
        /// Raises the <see cref="ProbeAttached"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="PulseOximeter"/> that raised the event.</param>
        protected virtual void OnProbeAttached(PulseOximeter sender)
        {
            if (this.onProbeAttached == null)
            {
                this.onProbeAttached = new ProbeAttachedHandler(this.OnProbeAttached);
            }

            if (Program.CheckAndInvoke(ProbeAttached, this.onProbeAttached, sender))
            {
                this.ProbeAttached(sender);
            }
        }

        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="ProbeDetached"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="PulseOximeter"/> object that raised the event.</param>
        public delegate void ProbeDetachedHandler(PulseOximeter sender);

        /// <summary>
        /// Raised when the <see cref="PulseOximeter"/> detects that the probe is removed from a finger.
        /// </summary>
        public event ProbeDetachedHandler ProbeDetached;

        private ProbeDetachedHandler onProbeDetached;

        /// <summary>
        /// Raises the <see cref="ProbeDetached"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="PulseOximeter"/> that raised the event.</param>
        protected virtual void OnProbeDetached(PulseOximeter sender)
        {
            if (this.onProbeDetached == null)
            {
                this.onProbeDetached = new ProbeDetachedHandler(this.OnProbeDetached);
            }

            if (Program.CheckAndInvoke(ProbeDetached, this.onProbeDetached, sender))
            {
                this.ProbeDetached(sender);
            }
        }
    }
}
