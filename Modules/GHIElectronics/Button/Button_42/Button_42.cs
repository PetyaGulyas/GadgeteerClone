using GT = Gadgeteer;
using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.Interfaces;

namespace Gadgeteer.Modules.GHIElectronics
{
    /// <summary>
    /// A simple button module for .NET Gadgeteer
    /// </summary>
    /// <example>
    /// <para>The following example show intialization of a <see cref="Button"/> object and the delegate that handles the 
    /// <see cref="Button.ButtonPressed"/> event.</para>
    /// <code>
    /// using System;
    /// using Microsoft.SPOT;
    /// using Microsoft.SPOT.Presentation;
    /// using Microsoft.SPOT.Presentation.Controls;
    /// using Microsoft.SPOT.Presentation.Media;
    ///
    /// using GT = Gadgeteer;
    /// using GTM = Gadgeteer.Modules;
    ///
    /// using Gadgeteer.Modules.GHIElectronics;
    ///
    /// namespace TestApp
    /// {
    ///     public partial class Program
    ///     {
    ///         // This template uses the FEZ Spider mainboard from GHI Electronics
    ///
    ///         // Define and initialize GTM.Modules here, specifying their socket numbers.        
    ///         GTM.GHIElectronics.UsbClientDP usbClient = new UsbClientDP(1);
    ///         GTM.GHIElectronics.Button button = new Button(4);
    ///
    ///         void ProgramStarted()
    ///         {
    ///             // Initialize event handlers here.
    ///             button.ButtonPressed += new Button.ButtonEventHandler(button_ButtonPressed);
    ///
    ///             // Do one-time tasks here
    ///             Debug.Print("Program Started");
    ///         }
    ///
    ///         void button_ButtonPressed(Button sender, Button.ButtonState state)
    ///         {
    ///             Debug.Print("Button pressed.");
    ///         }
    ///     }
    /// }
    ///
    /// </code>
    /// </example>
    public class Button : GTM.Module
    {
        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The mainboard socket that has the module plugged into it.</param>
        public Button(int socketNumber)
        {
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);

            socket.EnsureTypeIsSupported(new char[] { 'X', 'Y' }, this);

            // These calls will throw GT.Socket.InvalidSocketException if a pin conflict or error is encountered
            this.input = new GTI.InterruptInput(socket, GT.Socket.Pin.Three, GTI.GlitchFilterMode.On, GTI.ResistorMode.PullUp, GTI.InterruptMode.RisingAndFallingEdge, this);
            this.input.Interrupt += new GTI.InterruptInput.InterruptEventHandler(this._input_Interrupt);
            this.led = new GTI.DigitalOutput(socket, GT.Socket.Pin.Four, false, this);

            LEDMode = LEDModes.Off;
        }

        private void _input_Interrupt(GTI.InterruptInput input, bool value)
        {
            ButtonState buttonState = input.Read() ? ButtonState.Released : ButtonState.Pressed;
            switch (buttonState)
            {
                case ButtonState.Released:
                    if (LEDMode == LEDModes.OnWhilePressed)
                        TurnLEDOff();
                    else if (LEDMode == LEDModes.OnWhileReleased)
                        TurnLEDOn();
                    else if (LEDMode == LEDModes.ToggleWhenReleased)
                        ToggleLED();
                    break;
                case ButtonState.Pressed:
                    if (LEDMode == LEDModes.OnWhilePressed)
                        TurnLEDOn();
                    else if (LEDMode == LEDModes.OnWhileReleased)
                        TurnLEDOff();
                    else if (LEDMode == LEDModes.ToggleWhenPressed)
                        ToggleLED();
                    break;
            }
            this.OnButtonEvent(this, buttonState);
        }

        private GTI.InterruptInput input;
        private GTI.DigitalOutput led;



        /// <summary>
        /// Gets a value that indicates whether the state of this Button is Pressed.
        /// </summary>
        public bool IsPressed
        {
            get
            {
                return !this.input.Read();
            }
        }

        /// <summary>
        /// Represents the state of the <see cref="Button"/> object.
        /// </summary>
        public enum ButtonState
        {
            /// <summary>
            /// The state of Button is Pressed.
            /// </summary>
            Pressed = 0,
            /// <summary>
            /// The state of Button is Released.
            /// </summary>
            Released = 1
        }

        /// <summary>
        /// Turns on the module's LED.
        /// </summary>
        public void TurnLEDOn()
        {
            led.Write(true);
        }

        /// <summary>
        /// Turns off the module's LED.
        /// </summary>
        public void TurnLEDOff()
        {
            led.Write(false);
        }

        /// <summary>
        /// Toggles the module's LED. If the LED is currently on, it is turned off. If it is currently off, it is turned on.
        /// </summary>
        public void ToggleLED()
        {
            if (IsLedOn)
                TurnLEDOff();
            else
                TurnLEDOn();
        }

        /// <summary>
        /// Gets a boolean value that indicates whether the module's LED is currently lit (true = lit, false = off).
        /// </summary>
        public bool IsLedOn
        {
            get
            {
                return led.Read();
            }
        }

        /// <summary>
        /// Enuerates the various modes a LED can be set to.
        /// </summary>
        public enum LEDModes
        {
            /// <summary>
            /// The LED is on regardless of the button state.
            /// </summary>
            On,
            /// <summary>
            /// The LED is off regardless of the button state.
            /// </summary>
            Off,
            /// <summary>
            /// The LED changes state whenever the button is pressed.
            /// </summary>
            ToggleWhenPressed,
            /// <summary>
            /// The LED changes state whenever the button is released.
            /// </summary>
            ToggleWhenReleased,
            /// <summary>
            ///  The LED is on while the button is pressed.
            /// </summary>
            OnWhilePressed,
            /// <summary>
            /// The LED is on except when the button is pressed.
            /// </summary>
            OnWhileReleased
        }

        private LEDModes _ledMode;

        /// <summary>
        /// Gets or sets the LED's current mode of operation.
        /// </summary>
        public LEDModes LEDMode
        {
            get
            {
                return _ledMode;
            }
            set
            {
                _ledMode = value;

                if (_ledMode == LEDModes.On || _ledMode == LEDModes.OnWhilePressed && IsPressed || _ledMode == LEDModes.OnWhileReleased && !IsPressed)
                    TurnLEDOn();
                else if (_ledMode == LEDModes.Off || _ledMode == LEDModes.OnWhileReleased && IsPressed || _ledMode == LEDModes.OnWhilePressed && !IsPressed)
                    TurnLEDOff();
            }

        }

        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="ButtonReleased"/>
        /// and <see cref="ButtonPressed"/> events.
        /// </summary>
        /// <param name="sender">The <see cref="Button"/> object that raised the event.</param>
        /// <param name="state">The state of the Button</param>
        public delegate void ButtonEventHandler(Button sender, ButtonState state);

        /// <summary>
        /// Raised when the state of <see cref="Button"/> is Released.
        /// </summary>
        /// <remarks>
        /// Implement this event handler and the <see cref="ButtonPressed"/> event handler
        /// when you want to provide an action associated with Button activity.
        /// The state of the Button is passed to the <see cref="ButtonEventHandler"/> delegate,
        /// so you can use the same event handler for both Button states.
        /// </remarks>
        public event ButtonEventHandler ButtonReleased;

        /// <summary>
        /// Raised when the state of <see cref="Button"/> is Pressed.
        /// </summary>
        /// <remarks>
        /// Implement this event handler and the <see cref="ButtonReleased"/> event handler
        /// when you want to provide an action associated with Button activity.
        /// Since the state of the Button is passed to the <see cref="ButtonEventHandler"/> delegate,
        /// you can use the same event handler for both Button states.
        /// </remarks>
        public event ButtonEventHandler ButtonPressed;

        private ButtonEventHandler onButton;

        /// <summary>
        /// Raises the <see cref="ButtonReleased"/> or <see cref="ButtonPressed"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="Button"/> that raised the event.</param>
        /// <param name="ButtonState">The state of the Button.</param>
        protected virtual void OnButtonEvent(Button sender, ButtonState ButtonState)
        {
            if (this.onButton == null)
            {
                this.onButton = new ButtonEventHandler(this.OnButtonEvent);
            }

            if (Program.CheckAndInvoke((ButtonState == ButtonState.Released ? this.ButtonReleased : this.ButtonPressed), this.onButton, sender, ButtonState))
            {
                switch (ButtonState)
                {
                    case ButtonState.Released:
                        this.ButtonReleased(sender, ButtonState);
                        break;
                    case ButtonState.Pressed:
                        this.ButtonPressed(sender, ButtonState);
                        break;
                }

            }
        }
    }
}
