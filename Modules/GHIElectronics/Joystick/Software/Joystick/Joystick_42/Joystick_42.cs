using GT = Gadgeteer;
using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.Interfaces;

namespace Gadgeteer.Modules.GHIElectronics
{
    // -- CHANGE FOR MICRO FRAMEWORK 4.2 --
    // If you want to use Serial, SPI, or DaisyLink (which includes GTI.SoftwareI2C), you must do a few more steps
    // since these have been moved to separate assemblies for NETMF 4.2 (to reduce the minimum memory footprint of Gadgeteer)
    // 1) add a reference to the assembly (named Gadgeteer.[interfacename])
    // 2) in GadgeteerHardware.xml, uncomment the lines under <Assemblies> so that end user apps using this module also add a reference.

    /// <summary>
    /// A simple joystick module with button for .NET Gadgeteer.
    /// </summary>
    /// <example>
    /// <para>The following example uses a <see cref="Joystick"/> object to read the X and Y position and display it in the output window. 
    /// </para>
    /// <code>
    /// using System;
    /// using System.Collections;
    /// using System.Threading;
    /// using Microsoft.SPOT;
    /// using Microsoft.SPOT.Presentation;
    /// using Microsoft.SPOT.Presentation.Controls;
    /// using Microsoft.SPOT.Presentation.Media;
    /// using Microsoft.SPOT.Touch;
    ///
    /// using Gadgeteer.Networking;
    /// using GT = Gadgeteer;
    /// using GTM = Gadgeteer.Modules;
    /// using Gadgeteer.Modules.GHIElectronics;
    ///
    /// namespace TestApp
    /// {
    ///     public partial class Program
    ///     {
    ///         void ProgramStarted()
    ///         {
    ///             Thread joystickThread = new Thread(joystickReadThread);
    ///             joystickThread.Start();
    ///         }
    ///
    ///         void joystickReadThread()
    ///         {
    ///             double xPos = 0.0;
    ///             double yPos = 0.0;
    ///
    ///             while (true)
    ///             {
    ///                 xPos = joystick.GetJoystickPosition().X;
    ///                 yPos = joystick.GetJoystickPosition().X;
    ///                 Debug.Print("X: " + xPos + " Y: " + yPos);
    ///                 Thread.Sleep(100);
    ///             }
    ///         }
    ///     }
    /// }
    /// </code>
    /// </example>
    public class Joystick : GTM.Module
    {
        private GTI.AnalogInput inputX;
        private GTI.AnalogInput inputY;
        private GTI.InterruptInput input;

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The mainboard socket that has the module plugged into it.</param>
        public Joystick(int socketNumber)
        {
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);
            this.inputX = new GTI.AnalogInput(socket, Socket.Pin.Four, this);
            this.inputY = new GTI.AnalogInput(socket, Socket.Pin.Five, this);
            this.input = new GTI.InterruptInput(socket, GT.Socket.Pin.Three, GTI.GlitchFilterMode.On, GTI.ResistorMode.PullUp, GTI.InterruptMode.RisingAndFallingEdge, this);
            this.input.Interrupt += new GTI.InterruptInput.InterruptEventHandler(this._input_Interrupt);
        }

        private void _input_Interrupt(GTI.InterruptInput input, bool value)
        {
            JoystickState joystickState = value ? JoystickState.Released : JoystickState.Pressed;

            this.OnJoystickEvent(this, joystickState);
        }

        /// <summary>
        /// Gets a value that indicates whether the state of this Joystick is Pressed.
        /// </summary>
        public bool IsPressed
        {
            get
            {
                return !this.input.Read();
            }
        }

        /// <summary>
        /// Represents the state of the <see cref="Joystick"/> object.
        /// </summary>
        public enum JoystickState
        {
            /// <summary>
            /// The state of Joystick is Pressed.
            /// </summary>
            Pressed = 0,
            /// <summary>
            /// The state of Joystick is Released.
            /// </summary>
            Released = 1
        }

        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="JoystickReleased"/>
        /// and <see cref="JoystickPressed"/> events.
        /// </summary>
        /// <param name="sender">The <see cref="Joystick"/> object that raised the event.</param>
        /// <param name="state">The state of the Joystick.</param>
        public delegate void JoystickEventHandler(Joystick sender, JoystickState state);

        /// <summary>
        /// Raised when the state of <see cref="Joystick"/> is Released.
        /// </summary>
        /// <remarks>
        /// Implement this event handler and the <see cref="JoystickPressed"/> event handler
        /// when you want to provide an action associated with Joystick activity.
        /// The state of the Joystick is passed to the <see cref="JoystickEventHandler"/> delegate,
        /// so you can use the same event handler for both Joystick states.
        /// </remarks>
        public event JoystickEventHandler JoystickReleased;

        /// <summary>
        /// Raised when the state of <see cref="Joystick"/> is Pressed.
        /// </summary>
        /// <remarks>
        /// Implement this event handler and the <see cref="JoystickReleased"/> event handler
        /// when you want to provide an action associated with Joystick activity.
        /// Since the state of the Joystick is passed to the <see cref="JoystickEventHandler"/> delegate,
        /// you can use the same event handler for both Joystick states.
        /// </remarks>
        public event JoystickEventHandler JoystickPressed;

        private JoystickEventHandler onJoystick;

        /// <summary>
        /// Raises the <see cref="JoystickReleased"/> or <see cref="JoystickPressed"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="Joystick"/> that raised the event.</param>
        /// <param name="JoystickState">The state of the Joystick.</param>
        protected virtual void OnJoystickEvent(Joystick sender, JoystickState JoystickState)
        {
            if (this.onJoystick == null)
            {
                this.onJoystick = new JoystickEventHandler(this.OnJoystickEvent);
            }

            if (Program.CheckAndInvoke((JoystickState == JoystickState.Released ? this.JoystickReleased : this.JoystickPressed), this.onJoystick, sender, JoystickState))
            {
                switch (JoystickState)
                {
                    case JoystickState.Released:
                        this.JoystickReleased(sender, JoystickState);
                        break;
                    case JoystickState.Pressed:
                        this.JoystickPressed(sender, JoystickState);
                        break;
                }

            }
        }

        /// <summary>
        /// Gets the joystick position.
        /// </summary>
        /// <returns></returns>
        public Position GetJoystickPosition()
        {
            Position pos = new Position()
            {
                X = inputX.ReadProportion(),
                Y = 1 - inputY.ReadProportion()
            };

            return pos;
        }

        /// <summary>
        /// Structure that contains the X and Y coordinates of the joystick from 0.0 to 1.0 (0.5 means centred).
        /// </summary>
        public struct Position
        {
            /// <summary>
            /// The X coordinate of the joystick from 0.0 to 1.0 (0.5 means centred).
            /// </summary>
            public double X;

            /// <summary>
            /// The Y coordinate of the joystick from 0.0 to 1.0 (0.5 means centred).
            /// </summary>
            public double Y;
        }

    }
}