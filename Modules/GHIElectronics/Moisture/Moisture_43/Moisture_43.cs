using System;
using Microsoft.SPOT;

using GT = Gadgeteer;
using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.SocketInterfaces;

namespace Gadgeteer.Modules.GHIElectronics
{
    /// <summary>
    /// A Moisture module for Microsoft .NET Gadgeteer
    /// </summary>
    public class Moisture : GTM.Module
    {

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The socket that this module is plugged in to.</param>
        public Moisture(int socketNumber)
        {
            // This finds the Socket instance from the user-specified socket number.  
            // This will generate user-friendly error messages if the socket is invalid.
            // If there is more than one socket on this module, then instead of "null" for the last parameter, 
            // put text that identifies the socket to the user (e.g. "S" if there is a socket type S)
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);

            analogInput = GTI.AnalogInputFactory.Create(socket, Socket.Pin.Three, this);
            digitalOutput = GTI.DigitalOutputFactory.Create(socket, Socket.Pin.Six, true, this);
        }

        GTI.AnalogInput analogInput;
        GTI.DigitalOutput digitalOutput;

        /// <summary>
        /// Gets the current moisture reading.
        /// </summary>
        /// <returns>An integer value, where 0 is fully dry and 1000 (or greater) is completely wet. </returns>
        public int GetMoistureReading()
        {
            return (int)(analogInput.ReadProportion() * 1600.0);
        }

        /// <summary>
        /// Enables or disables the measurement abilities of the sensor. The sensor is enabled by default. 
        /// </summary>
        public bool Enabled
        {

            get
            {
                return digitalOutput.Read();
            }

            set
            {
                digitalOutput.Write(value);
            }
        }


    }
}
