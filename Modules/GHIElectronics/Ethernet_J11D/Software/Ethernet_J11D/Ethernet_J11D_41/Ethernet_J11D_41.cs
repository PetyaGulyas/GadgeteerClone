using System;

using Microsoft.SPOT.Net.NetworkInformation;

using GT = Gadgeteer;
using GTM = Gadgeteer.Modules;

using GHINet = GHIElectronics.NETMF.Net;

namespace Gadgeteer.Modules.GHIElectronics
{
    /// <summary>
    /// An Ethernet J11D Gadgeteer module.
    /// </summary>
    public class Ethernet_J11D : GTM.Module.NetworkModule
    {
        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The mainboard socket that has the module plugged into it.</param>
        public Ethernet_J11D(int socketNumber)
        {
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);

            if (socket.SupportsType('E') == false)
            {
                throw new GT.Socket.InvalidSocketException("Socket " + socketNumber +
                    " does not support support Ethernet J11D modules. Please plug the Ethernet J11D module into a socket labeled 'E'");
            }

            // Reserve Ethernet module pins
            try
            {
                socket.ReservePin(Socket.Pin.Four, this);
                socket.ReservePin(Socket.Pin.Five, this);
                socket.ReservePin(Socket.Pin.Six, this);
                socket.ReservePin(Socket.Pin.Seven, this);
                socket.ReservePin(Socket.Pin.Eight, this);
                socket.ReservePin(Socket.Pin.Nine, this);
            }

            catch (Exception e)
            {
                throw new GT.Socket.InvalidSocketException("There is an issue connecting the Ethernet J11D module to socket " + socketNumber +
                    ". Please check that all modules are connected to the correct sockets or try connecting the Ethernet J11D to a different 'E ' socket", e);
            }

            if (!GHINet.Ethernet.IsEnabled)
            {
                GHINet.Ethernet.Enable();
            }

            NetworkInterface[] netInterfaces = NetworkInterface.GetAllNetworkInterfaces();

            if (netInterfaces == null || netInterfaces[0] == null)
            {
                throw new Exception("Unable to configure the mainboard's Ethernet interface");
            }

            for (int i = 0; i < netInterfaces.Length; i++)
            {
                if (netInterfaces[i].NetworkInterfaceType == NetworkInterfaceType.Ethernet)
                {
                    NetworkSettings = netInterfaces[i];
                    break;
                }
            }

            if (null == NetworkSettings)
            {
                throw new Exception("Unable to find an Ethernet interface on the mainboard.");
            }


        }

        /// <summary>
        /// Gets a value that indicates whether this ethernet module is physically connected to a network device.
        /// </summary>
        /// <remarks>
        /// <para>
        ///  This property enables you to determine if the <see cref="Ethernet_J11D"/> module is
        ///  physically connected to a network device, such as a router. 
        ///  When this property is <b>true</b>, it does not necessarily mean that the network connection is usable. 
        ///  You must also check the <see cref="P:Microsoft.Gadgeteer.Modules.NetworkModule.IsNetworkUp"/> property. 
        ///  <see cref="P:Microsoft.Gadgeteer.Modules.NetworkModule.IsNetworkUp"/> returns <b>true</b> 
        ///  if the network connection is both connected and configured for Internet Proctocol (IP) communication tasks. 
        /// </para>
        /// <note>
        ///  When <see cref="P:Microsoft.Gadgeteer.Modules.NetworkModule.IsNetworkUp"/> is <b>true</b>, it does not necessarily mean 
        ///  that the network connection is functional. The IP configuration
        ///  for the network connection may be invalid for the network that it is connected to.
        /// </note>
        /// </remarks>
        public override bool IsNetworkConnected
        {
            get
            {
                return GHINet.Ethernet.IsCableConnected;
            }
        }

    }
}