using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.Interfaces;

using System.Threading;

namespace Gadgeteer.Modules.GHIElectronics
{
    /// <summary>
    /// A Bluetooth module for Microsoft .NET Gadgeteer
    /// </summary>
    public class Bluetooth : GTM.Module
    {
        /// <summary>
        /// Direct access to Serial Port.
        /// </summary>
        public GTI.Serial serialPort;
        private GTI.DigitalOutput reset;
        private GTI.InterruptInput statusInt;

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The socket that this module is plugged in to.</param>
        public Bluetooth(int socketNumber)
        {
            // This finds the Socket instance from the user-specified socket number.  
            // This will generate user-friendly error messages if the socket is invalid.
            // If there is more than one socket on this module, then instead of "null" for the last parameter, 
            // put text that identifies the socket to the user (e.g. "S" if there is a socket type S)
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);

            this.reset = new GTI.DigitalOutput(socket, Socket.Pin.Six, false, this);
            this.statusInt = new GTI.InterruptInput(socket, Socket.Pin.Three, GTI.GlitchFilterMode.Off, GTI.ResistorMode.Disabled, GTI.InterruptMode.RisingAndFallingEdge, this);
            this.serialPort = new GTI.Serial(socket, 38400, GTI.Serial.SerialParity.None, GTI.Serial.SerialStopBits.One, 8, GTI.Serial.HardwareFlowControl.NotRequired, this);

            this.statusInt.Interrupt += new GTI.InterruptInput.InterruptEventHandler(statusInt_Interrupt);
            this.serialPort.ReadTimeout = Timeout.Infinite;
            this.serialPort.Open();

            Thread.Sleep(5);
            this.reset.Write(true);
        }

        /// <summary>
        /// Hard Reset Bluetooth module
        /// </summary>
        public void Reset()
        {
            this.reset.Write(false);
            Thread.Sleep(5);
            this.reset.Write(true);
        }


        void statusInt_Interrupt(GTI.InterruptInput sender, bool value)
        {
            this.OnBluetoothEvent(this, value ? BluetoothState.Disconnected : BluetoothState.Connected);
        }


        /// <summary>
        /// Gets a value that indicates whether the bluetooth connection is connected.
        /// </summary>
        public bool IsConnected
        {
            get
            {
                return this.statusInt.Read();
            }
        }

        /// <summary>
        /// Represents the state of the <see cref="Bluetooth"/> connection.
        /// </summary>
        public enum BluetoothState
        {
            /// <summary>
            /// The Bluetooth connection is disconnected.
            /// </summary>
            Disconnected = 0,
            /// <summary>
            /// The Bluetooth connection is connected.
            /// </summary>
            Connected = 1
        }

        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="BluetoothConnected"/>
        /// and <see cref="BluetoothDisconnected"/> events.
        /// </summary>
        /// <param name="sender">The <see cref="Bluetooth"/> object that raised the event.</param>
        /// <param name="state">The state of the Bluetooth</param>
        public delegate void BluetoothEventHandler(Bluetooth sender, BluetoothState state);

        /// <summary>
        /// Raised when the state of <see cref="Bluetooth"/> is connected.
        /// </summary>
        /// <remarks>
        /// Implement this event handler and the <see cref="BluetoothConnected"/> event handler
        /// when you want to provide an action associated with Bluetooth activity.
        /// The state of the Bluetooth is passed to the <see cref="BluetoothEventHandler"/> delegate,
        /// so you can use the same event handler for both Bluetooth states.
        /// </remarks>
        public event BluetoothEventHandler BluetoothConnected;

        /// <summary>
        /// Raised when the state of <see cref="Bluetooth"/> is disconnectd.
        /// </summary>
        /// <remarks>
        /// Implement this event handler and the <see cref="BluetoothDisconnected"/> event handler
        /// when you want to provide an action associated with Bluetooth activity.
        /// Since the state of the Bluetooth is passed to the <see cref="BluetoothEventHandler"/> delegate,
        /// you can use the same event handler for both Bluetooth states.
        /// </remarks>
        public event BluetoothEventHandler BluetoothDisconnected;

        private BluetoothEventHandler onBluetooth;

        /// <summary>
        /// Raises the <see cref="BluetoothConnected"/> or <see cref="BluetoothDisconnected"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="Bluetooth"/> that raised the event.</param>
        /// <param name="BluetoothState">The state of the Bluetooth.</param>
        protected virtual void OnBluetoothEvent(Bluetooth sender, BluetoothState BluetoothState)
        {
            if (this.onBluetooth == null)
            {
                this.onBluetooth = new BluetoothEventHandler(this.OnBluetoothEvent);
            }

            if (Program.CheckAndInvoke((BluetoothState == BluetoothState.Connected ? this.BluetoothConnected : this.BluetoothDisconnected), this.onBluetooth, sender, BluetoothState))
            {
                switch (BluetoothState)
                {
                    case BluetoothState.Connected:
                        this.BluetoothConnected(sender, BluetoothState);
                        break;
                    case BluetoothState.Disconnected:
                        this.BluetoothDisconnected(sender, BluetoothState);
                        break;
                }
            }
        }
    }
}