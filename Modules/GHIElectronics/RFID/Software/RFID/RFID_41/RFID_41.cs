using System;

using GT = Gadgeteer;
using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.Interfaces;

namespace Gadgeteer.Modules.GHIElectronics
{
    /// <summary>
    /// A RFID module for Microsoft .NET Gadgeteer
    /// </summary>
    public class RFID : GTM.Module
    {
        private GT.Interfaces.Serial serialPort;

        private const int ID_LENGTH = 11;

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The socket that this module is plugged in to.</param>
        public RFID(int socketNumber)
        {
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);

            socket.EnsureTypeIsSupported('U', this);

            serialPort = new GTI.Serial(socket, 9600, GTI.Serial.SerialParity.None, GTI.Serial.SerialStopBits.Two, 8, GTI.Serial.HardwareFlowControl.NotRequired, this);
            serialPort.Open();

            System.Threading.Thread readThread = new System.Threading.Thread(_readThreadStart);

            readThread.Start();
        }

        void _readThreadStart()
        {
            int bytesToRead = 0;
            byte[] readBuffer;

            string cardID = new string(null);

            for (; ; )
            {
                bytesToRead = serialPort.BytesToRead;

                if (bytesToRead > 0)
                {
                    readBuffer = new byte[bytesToRead];

                    serialPort.Read(readBuffer, 0, bytesToRead);

                    for (int i = 0; i < readBuffer.Length; i++)
                    {
                        cardID += (char)readBuffer[i];

                        if (cardID.Length == ID_LENGTH)
                        {
                            OnIDReadyEvent(this, cardID);

                            System.Threading.Thread.Sleep(100);

                            cardID = new string(null);

                            break;
                        }
                    }
                }

                System.Threading.Thread.Sleep(10);
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="ID"></param>
        public delegate void CardIDReceivedEventHandler(RFID sender, String ID);
        
        /// <summary>
        /// 
        /// </summary>
        public event CardIDReceivedEventHandler CardIDReceived;
        //private CardIDReceivedEventHandler _CardIDReceived;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="ID"></param>
        protected virtual void OnIDReadyEvent(RFID sender, String ID)
        {
            this.CardIDReceived(sender, ID);
        }
    }
}
