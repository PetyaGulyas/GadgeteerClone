using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.Interfaces;

namespace Gadgeteer.Modules.GHIElectronics
{
    /// <summary>
    /// A IO60P16 module for Microsoft .NET Gadgeteer
    /// </summary>
    public class IO60P16 : GTM.Module
    {
        private static GTI.SoftwareI2C i2c;

        /// <summary>
        /// Address of the device.
        /// </summary>
        public const byte DEV_ADDR = 0x20;

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The socket that this module is plugged in to.</param>
        public IO60P16(int socketNumber)
        {
            Socket socket = Socket.GetSocket(socketNumber, true, this, null);
            char[] types = new char[] { 'X', 'Y' };
            socket.EnsureTypeIsSupported(types, this);

            i2c = new GTI.SoftwareI2C(socket, Socket.Pin.Five, Socket.Pin.Four, this);
        }

        /// <summary>
        /// Writes a value to a register.
        /// </summary>
        /// <param name="reg">The register to write to.</param>
        /// <param name="value">The value to write.</param>
        public void WriteRegister(byte reg, byte value)
        {
            byte[] data = new byte[] { reg, value };
            int send = i2c.Write(DEV_ADDR, data);
        }

        /// <summary>
        /// Reads a value from a register.
        /// </summary>
        /// <param name="reg">The register to read from.</param>
        /// <returns>The value in the register.</returns>
        public byte ReadRegister(byte reg)
        {
            byte[] data = new byte[1];
            // Bring the pointer to the needed address
            int send = i2c.Write(DEV_ADDR, new byte[] { reg });
            // Read the address
            i2c.Read(DEV_ADDR, data);
            return data[0];
        }

        /// <summary>
        /// Writes a value to the specified port.
        /// </summary>
        /// <param name="port">Port to write to.</param>
        /// <param name="value">Value to write to the port.</param>
        private void WritePort(byte port, byte value)
        {
            // Write data start from register 0x08
            WriteRegister((byte)(0x08 + port), value);
        }

        /// <summary>
        /// Reads the value of a port.
        /// </summary>
        /// <param name="port">The port to read.</param>
        /// <returns>The value of the port.</returns>
        private byte ReadPort(byte port)
        {
            // Read data start from register 0x00
            return ReadRegister((byte)(0x00 + port));
        }

        /// <summary>
        /// Makes a pin an output pin.
        /// </summary>
        /// <param name="port">The port that the pin is in.</param>
        /// <param name="pin">The pin to make an output pin.</param>
        public void MakePinOutput(byte port, byte pin)
        {
            WriteRegister(0x18, port); // Select port
            byte b = ReadRegister(0x1C); // Return value
            b &= (byte)(~(1 << pin)); // 0 is out put
            WriteRegister(0x1C, b);   // write to register

        }

        /// <summary>
        /// Makes a pin an input pin.
        /// </summary>
        /// <param name="port">The port that the pin is in.</param>
        /// <param name="pin">The pin to make an input pin.</param>
        public void MakePinInput(byte port, byte pin)
        {
            WriteRegister(0x18, port); // Select port
            byte b = ReadRegister(0x1C); // Return value
            b |= (byte)((1 << pin)); // 1 is input
            WriteRegister(0x1C, b); // write to register
        }

        /// <summary>
        /// Makes a pin high.
        /// </summary>
        /// <param name="port">The port that the pin is in.</param>
        /// <param name="pin">The pin to make high.</param>
        public void MakePinHigh(byte port, byte pin)
        {
            // Read port
            byte b = ReadPort(port);
            // Config pin
            b |= (byte)(1 << (pin));
            // Apply
            WritePort(port, b);
        }

        /// <summary>
        /// Makes a pin low.
        /// </summary>
        /// <param name="port">The port that the pin is in.</param>
        /// <param name="pin">The pin to make low.</param>
        public void MakePinLow(byte port, byte pin)
        {
            // Read port
            byte b = ReadPort(port);
            // Config pin
            b &= (byte)~(1 << (pin));
            // Config pin
            WritePort(port, b);
        }
    }
}